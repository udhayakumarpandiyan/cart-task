{"version":3,"sources":["route/history.js","store/reducers/ShoppingListReducer.js","store/reducers/CartReducer.js","store/reducers/index.js","store/index.js","App.js","serviceWorker.js","index.js","store/types/index.js"],"names":["createBrowserHistory","initialState","shoppingList","undefined","cartItems","rootReducer","combineReducers","shoppingListReducer","state","action","type","GET_SHOPPING_LIST","payload","cartReducer","GET_CART_ITEMS","REMOVE_ITEM_FROM_CART","ADD_ITEM_TO_CART","item","middlewares","thunk","enhancers","compose","applyMiddleware","persistConfig","key","storage","stateReconciler","hardSet","pReducer","persistReducer","store","createStore","persistor","persistStore","App","Shell","lazy","fallback","className","loading","Boolean","window","location","hostname","match","ReactDOM","render","history","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ON_ERROR"],"mappings":"iHAAA,WAEeA,mB,0xBCDf,IAAMC,EAAe,CACjBC,kBAAcC,G,qkBCDlB,IAAMF,EAAe,CACjBG,UAAW,ICEf,IAIeC,EAJKC,YAAgB,CAChCC,oBFAW,WAAqD,IAA/BC,EAA8B,uDAAtBP,EAAcQ,EAAQ,uCAC/D,OAAQA,EAAOC,MACX,KAAKC,IACD,OAAO,EAAP,GACOH,EADP,CAEIN,aAAcO,EAAOG,UAG7B,QACI,OAAO,EAAP,GACOJ,KEVMK,YDCV,WAAkD,IAA/BL,EAA8B,uDAAtBP,EAAcQ,EAAQ,uCAC5D,OAAQA,EAAOC,MACX,KAAKI,IAML,KAAKC,IACD,OAAO,KACAP,EADP,CAEIJ,UAAWK,EAAOG,UAG1B,KAAKI,IACD,OAAO,KACAR,EADP,CAEIJ,UAAU,GAAD,mBAAMI,EAAMJ,WAAZ,CAAuBK,EAAOG,QAAQK,SAEvD,QACI,OAAO,KACAT,O,gBEpBbU,EAAc,CAACC,KAEfC,EAAYC,YACdC,IAAe,WAAf,EAAmBJ,IAGjBK,EAAgB,CAClBC,IAAK,OACLC,YACAC,gBAAiBC,KAIfC,EAAWC,YAAeN,EAAelB,GAElCyB,EAAQC,YACjBH,EAEAR,GAESY,EAAYC,YAAaH,G,MCAvBI,MAnBf,WAEE,IAAMC,EAAQC,gBAAK,kBAAM,uDACzB,OACE,kBAAC,WAAD,CACEC,SAAU,yBAAKC,UAAU,oBAAf,gBAGV,6BACE,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,IAAD,CAAaS,QAAS,KAAMP,UAAWA,GACrC,kBAACG,EAAD,WCPQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCVNC,IAASC,OACL,kBAAC,IAAD,CAAQC,QAASA,KACb,kBAAC,EAAD,OACOC,SAASC,eAAe,SDsHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,+BEnInB,0KAAO,IACMC,EAAW,WACX1C,EAAiB,iBACjBE,EAAmB,mBACnBD,EAAuB,wBACvBJ,EAAoB,sB","file":"static/js/main.0debc67b.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import { GET_SHOPPING_LIST } from \"../types\";\r\nconst initialState = {\r\n    shoppingList: undefined\r\n}\r\n\r\nexport default function shoppingList(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_SHOPPING_LIST:\r\n            return {\r\n                ...state,\r\n                shoppingList: action.payload\r\n            };\r\n\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n};\r\n","import { GET_CART_ITEMS, ADD_ITEM_TO_CART, REMOVE_ITEM_FROM_CART } from \"../types\";\r\nconst initialState = {\r\n    cartItems: [],\r\n\r\n}\r\n\r\nexport default function cartItems(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_CART_ITEMS:\r\n            return {\r\n                ...state,\r\n                cartItems: action.payload\r\n            };\r\n\r\n        case REMOVE_ITEM_FROM_CART:\r\n            return {\r\n                ...state,\r\n                cartItems: action.payload\r\n            };\r\n\r\n        case ADD_ITEM_TO_CART:\r\n            return {\r\n                ...state,\r\n                cartItems: [...state.cartItems, action.payload.item]\r\n            };\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n};\r\n","import { combineReducers } from 'redux'\r\nimport shoppingListReducer from './ShoppingListReducer';\r\nimport cartReducer from './CartReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    shoppingListReducer, cartReducer\r\n})\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport rootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\nimport hardSet from 'redux-persist/es/stateReconciler/hardSet';\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst enhancers = compose(\r\n    applyMiddleware(...middlewares)\r\n);\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: hardSet\r\n    \r\n};\r\n\r\nconst pReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(\r\n    pReducer,\r\n    // undefined, // {}, // initial state\r\n    enhancers\r\n);\r\nexport const persistor = persistStore(store);","import React, { lazy, Suspense } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistor, store } from './store';\n\nimport './App.css';\n\n\nfunction App() {\n\n  const Shell = lazy(() => import('./shell/containers/Shell'));\n  return (\n    <Suspense\n      fallback={<div className=\"supsense-loading\">\n        Loading....\n    </div>}>\n      <div>\n        <Provider store={store}>\n          <PersistGate loading={null} persistor={persistor}>\n            <Shell />\n          </PersistGate>\n        </Provider>\n      </div>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport history from './route/history';\n\nReactDOM.render(\n    <Router history={history}>\n        <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const ON_LOAD = \"ON_LOAD\";\r\nexport const ON_ERROR = \"ON_ERROR\";\r\nexport const GET_CART_ITEMS = \"GET_CART_ITEMS\";\r\nexport const ADD_ITEM_TO_CART = \"ADD_ITEM_TO_CART\";\r\nexport const REMOVE_ITEM_FROM_CART =\"REMOVE_ITEM_FROM_CART\";\r\nexport const GET_SHOPPING_LIST = \"GET_SHOPPING_LIST\";"],"sourceRoot":""}